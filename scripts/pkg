#!/usr/bin/env bash
set -e

main() {
	case "$1" in
	"list")
		pkg::list
		;;
	"src")
		shift
		pkg::src "$1"
		;;
	"make")
		shift
		pkg::make "$@"
		;;
	"update")
		shift
		if [[ "$1" == "" ]]; then
			echo "Usage: $0 update <package> [commit]" >&2
			return 1
		fi
		pkg::update "$@"
		;;
	""|"-h"|"--help")
		echo "Usage: $0 {list|src|make|update}"
		;;
	*)
		echo "Unknown argument: $1"
		return 1;;
	esac
}

pkg::list() {
	nix-instantiate --eval --json \
		-E 'builtins.attrNames (import ./packages {})' \
		| jq -r '.[]'
}

pkg::src() {
	local package="$1"	

	cd packages
	src=$(sed -n 's/.*'"$package"'\s*=.*callPackage \(.*\) {.*}.*/\1/p' default.nix)
	if [[ ! "$src" ]]; then
		echo "Failed to find callPackage for $package" >&2
		exit 1
	fi

	# If we're importing a directory, then add the trailing filename.
	if [[ -d "$src" ]]; then
		src="$src/default.nix"
	fi

	if [[ ! -f "$src" ]]; then
		echo "Failed to find source file for $package" >&2
		exit 1
	fi

	realpath --relative-to=.. "$src"
}

pkg::make() {
	local packages=( "$@" )

	if (( ${#packages[@]} == 0 )); then
		packages=( packages/*/Makefile )
		for i in "${!packages[@]}"; do
			p=$(dirname "${packages[$i]}")
			p=${p#packages/}
			packages[$i]=$p
		done

		echo "No packages specified, making all packages with a Makefile:" >&2
		printf -- "- %s\n" "${packages[@]}" >&2
	fi

	for package in "${packages[@]}"; do
		src=$(scripts/pkg src "$package")
		dir=$(dirname "$src")
		if [[ ! -f "$dir/Makefile" ]]; then
			echo "No Makefile found for $package, skipping" >&2
			continue
		fi
		make -BC "$dir"
	done
}

pkg::update() {
	local package="$1"
	local nivFlags=()

	case "$2" in
	"v"*)
		nivFlags+=(-v "$2");;
	"refs/tags/"*|[0-9a-f]*)
		nivFlags+=(-r "$2" -v "");;
	"refs/heads/"*)
		nivFlags+=(-b "$2" -v "");;
	"latest"|"")
		nivFlags+=(-v "");;
	*)
		echo "Unknown version or ref or \`latest'" >&2
		exit 1;;
	esac

	niv update "$package" "${nivFlags[@]}" >&2

	(
		src=$(pkg::src "$package")
		echo "Source: $src"
		echo "Package: $package"

		cd packages
		nix-update --version=skip "$package" --override-filename "$src" >&2
	)

	pkg::make "$package"
}

# Only run main if this script is not being sourced as a library.
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
	main "$@"
fi
